-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create historical_games table
CREATE TABLE IF NOT EXISTS historical_games (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    concurso INTEGER NOT NULL UNIQUE,
    data DATE NOT NULL,
    numeros INTEGER[] NOT NULL CHECK (array_length(numeros, 1) = 15),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create players table
CREATE TABLE IF NOT EXISTS players (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dna JSONB NOT NULL,
    score INTEGER DEFAULT 0,
    generation INTEGER NOT NULL,
    parent_id BIGINT REFERENCES players(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT valid_generation CHECK (generation > 0)
);

-- Create predictions table
CREATE TABLE IF NOT EXISTS predictions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    player_id BIGINT REFERENCES players(id) NOT NULL,
    numbers INTEGER[] NOT NULL CHECK (array_length(numbers, 1) = 15),
    confidence DECIMAL CHECK (confidence >= 0 AND confidence <= 1),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create performance_metrics table
CREATE TABLE IF NOT EXISTS performance_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    player_id BIGINT REFERENCES players(id) NOT NULL,
    accuracy DECIMAL CHECK (accuracy >= 0 AND accuracy <= 1),
    matches INTEGER CHECK (matches >= 0 AND matches <= 15),
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create view for player statistics
CREATE OR REPLACE VIEW player_statistics AS
SELECT 
    p.id as player_id,
    AVG(pm.accuracy) as avg_accuracy,
    SUM(pm.matches) as total_matches,
    COUNT(pred.id) as predictions_count
FROM players p
LEFT JOIN performance_metrics pm ON p.id = pm.player_id
LEFT JOIN predictions pred ON p.id = pred.player_id
GROUP BY p.id;

-- Function to update player metrics
CREATE OR REPLACE FUNCTION update_player_metrics()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO performance_metrics (player_id, accuracy, matches)
    SELECT 
        NEW.player_id,
        CASE 
            WHEN array_length(array_intersect(NEW.numbers, game.numeros), 1) IS NULL THEN 0
            ELSE array_length(array_intersect(NEW.numbers, game.numeros), 1)::decimal / 15
        END as accuracy,
        COALESCE(array_length(array_intersect(NEW.numbers, game.numeros), 1), 0) as matches
    FROM historical_games game
    WHERE game.concurso = (SELECT MAX(concurso) FROM historical_games);
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update metrics after each prediction
CREATE TRIGGER after_prediction_insert
    AFTER INSERT ON predictions
    FOR EACH ROW
    EXECUTE FUNCTION update_player_metrics();

-- Function to calculate player metrics
CREATE OR REPLACE FUNCTION calculate_player_metrics(player_id BIGINT)
RETURNS TABLE (accuracy DECIMAL, matches INTEGER) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        AVG(pm.accuracy)::DECIMAL as accuracy,
        SUM(pm.matches)::INTEGER as matches
    FROM performance_metrics pm
    WHERE pm.player_id = calculate_player_metrics.player_id;
END;
$$ LANGUAGE plpgsql;

-- Function to update player DNA
CREATE OR REPLACE FUNCTION update_player_dna(player_id BIGINT, new_dna JSONB)
RETURNS BOOLEAN AS $$
BEGIN
    UPDATE players
    SET dna = new_dna
    WHERE id = player_id;
    
    RETURN FOUND;
END;
$$ LANGUAGE plpgsql;

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_historical_games_concurso ON historical_games(concurso);
CREATE INDEX IF NOT EXISTS idx_predictions_player_id ON predictions(player_id);
CREATE INDEX IF NOT EXISTS idx_performance_metrics_player_id ON performance_metrics(player_id);
CREATE INDEX IF NOT EXISTS idx_players_parent_id ON players(parent_id);

-- Add RLS policies
ALTER TABLE historical_games ENABLE ROW LEVEL SECURITY;
ALTER TABLE players ENABLE ROW LEVEL SECURITY;
ALTER TABLE predictions ENABLE ROW LEVEL SECURITY;
ALTER TABLE performance_metrics ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Public historical games are viewable by everyone"
    ON historical_games FOR SELECT
    USING (true);

CREATE POLICY "Players are viewable by everyone"
    ON players FOR SELECT
    USING (true);

CREATE POLICY "Predictions are viewable by everyone"
    ON predictions FOR SELECT
    USING (true);

CREATE POLICY "Performance metrics are viewable by everyone"
    ON performance_metrics FOR SELECT
    USING (true);